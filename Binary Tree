二叉树的基本概念
二叉树就是每个节点最多有两个子树的树结构，其两个子树通常被称为左子树（left subtree）和右子树（right subtree）。
二叉树的每个节点最多可能存在两棵子树（既不可能存在度大于2的节点），两个子树有左右之分且次序不能颠倒。
二叉树的第i层至多有2^(i-1)个结点，深度为k的二叉树至多有2^k-1个结点。
满二叉树（Full Binary Tree）指的是深度为k且有2^k-1个结点的二叉树。既除去叶子结点外其余结点均具有左右孩子。
完全二叉树（Complete Binary Tree）指的是除最深一层层外其余层既构成一个满二叉树的树，最大层的叶子结点全部靠左分布。具有n个结点的完全二叉树的结点与满二叉树中前n个结点一一对应。下图为完全二叉树。
对于完全二叉树，若以一个数组array来表示其按层从高到低，从左到右遍历的结果，设一个结点为i，则其父结点为i/2，其左子结点为2*i，其右子结点为2*i+1。
/*
* Definition of Binary Tree
*/
public class BinaryTreeNode{
    int data;
    BinaryTreeNode leftchild;
    BinaryTreeNode rightchild;
    BinaryTreeNode (int x){
        data = x;
    }

    /** construct binary tree with an array
     * recursive method
     * @param: an array contains the value for the binary tree 
     * @param: an index indicating which value should be the root
     * if no index provided, array[0] should be the root
     */
    public static BinaryTreeNode makeBinaryTree (int[] array){
        return makeBinaryTree(array, 0);
    }

    private static BinaryTreeNode makeBinaryTree (int[] array, int index){
        if (index >= array.length) {
            return null;
        }
        BinaryTreeNode root = new BinaryTreeNode(array[index]);
        root.left = makeBinaryTree(array, 2 * index);
        root.right = makeBinaryTree(array, 2 * index + 1);

        return root;
    }
}

递归实现
1.	前序遍历
/*
 * Pre-order traversal of a binary tree recursively
 */
public void preOrderTrav(BinaryTreeNode root) {
    if (root != null) {
        System.out.println(root.data);
        preOrderTrav(root.leftchild);
        preOrderTrav(root.rightchild);
    }
}
2.	中序遍历
/*
 * In-order traversal of a binary tree recursively
 */
public void inOrderTrav(BinaryTreeNode root) {
    if (root != null) {
        inorderTrav(root.leftchild);
        System.out.println(root.data);
        inorderTrav(root.rightchild);
    }
}
3.	后序遍历
/*
 * Post-order traversal of a binary tree recursively
 */
public void postOrderTrav(BinaryTreeNode root) {
    if (root != null) {
        postOrderTrav(root.leftchild);
        postOrderTrav(root.rightchild);
        System.out.println(root.data);
    }
}
非递归实现
1.	前序遍历
import java.util.Stack;

public void preorderTrav(BinaryTreeNode root){
    Stack<BinaryTreeNode> stack = new Stack<BinaryTreeNode>();
    if (root == null){
        System.out.println("Empty Tree!");
    }
    else{
        while （root != null || !stack.empty()) {
            while (root != null){
                System.out.println(root.data);
                stack.push(root);
                root = root.leftchild;
            }
            root = stack.pop();
            root = root.rightchild;
        }
    }
}
2.	中序遍历
import java.util.Stack;

public void inorderTrav(BinaryTreeNode root){
    Stack<BinaryTreeNode> stack = new Stack<BinaryTreeNode>();
    if (root == null){
        System.out.println("Empty Tree!");
    }
    else {
        while (root != null || !stack.empty()){
            while (root != null){
                stack.push();
                root = root.leftchild;
            }
            root = stack.pop();
            System.out.println(root.data);
            root = root.rightchild;
        }
    }
}
3.	后序遍历
如果当前结点左右子树均为空，则可以访问当前结点，或者左右子树不均为空，但是前一个访问的结点是当前结点的左孩子或者右孩子，则也可以访问当前结点，如果前面两种情况均不满足（即，当前结点的左右孩子不均为空，并且前一个访问的结点不是当前结点左右孩子中的任意一个），则若当前结点的右孩子不为空，将右孩子入栈，若当前结点的左孩子不为空，将左孩子入栈。
public static void postOrder(TreeNode root) {  
        if(root==null) return;  
        Stack<TreeNode> stack = new Stack<TreeNode>();  
        TreeNode current = null;  
        TreeNode pre = null;  
        stack.push(root);  
        while(!stack.isEmpty()) {  
            current = stack.peek();  
            if((current.left==null && current.right==null) || (pre!=null && (pre == current.left || pre == current.right))) {  
                System.out.println(current.val);  
                stack.pop();  
                pre = current;  
            }  
            else {  
                if(current.right!=null) {  
                    stack.push(current.right);  
                }  
                if(current.left != null) {  
                    stack.push(current.left);  
                }  
            }  
        }  
}  
BFS遍历
import java.util.Queue;
import java.util.LinkedList;

public void BFS(BinaryTreeNode root){
    if (root == null){
        System.out.println("Empty Tree!");
        return;
    }

    Queue<BinaryTreeNode> queue = new LinkedList<BinaryTreeNode>();
    queue.add(root);
    while (!queue.isEmpty()){
        BinaryTreeNode node = queue.remove();
        System.out.println(node.data);
        if (node.leftchild != null){
            queue.add(node.leftchild);
        }
        if (node.rightchild != null){
            queue.add(node.rightchild);
        }
    }
}
DFS遍历
栈方法
import java.util.Stack;

public void DFS(BinaryTreeNode root){
    if (root == null){
        System.out.println("Empty Tree!");
        return;
    }

    Stack<BinaryTreeNode> stack = new Stack<BinaryTreeNode>();
    stack.push(root);
    while (!stack.isEmpty()){
        BinaryTreeNode node = stack.pop();
        System.out.println(node.data);
if (node.rightchild != null){
            stack.push(node.rightchild);
		}
        if (node.leftchild != null){
            stack.push(node.leftchild);
        }
    }
}
递归方法
public void recursiveDFS(BinaryTreeNode root){
    if (root == null){
        System.out.println("Empty Tree!");
        return;
    }

System.out.println(root.data);
    if (root.rightchild != null){
        recursiveDFS(root.rightchild);
    }

    if (root.leftchild != null){
        recursiveDFS(root.leftchild);
    }
}
